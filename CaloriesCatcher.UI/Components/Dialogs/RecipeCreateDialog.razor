@using CaloriesCatcher.UI.Model
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="recipeDto.RecipeName" T="string" Label="Recipe Name"></MudTextField>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudFab HtmlTag="label"
                        Color="Color.Secondary"
                        Icon="@Icons.Material.Filled.Image"
                        Label="Load picture"
                        for="@context" />
            </ButtonTemplate>
        </MudFileUpload>
    </DialogContent>
    <DialogActions>
        
        <MudButton OnClick="CreateRecipe">Create Recipe</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Inject] IDialogService dialogService { get; set; } = default!;
    [Inject] private IRecipe recipeService { get; set; } = default!;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    [Inject] private NavigationManager navigationManager { get; set; } = default!;
    RecipeDto recipeDto = new RecipeDto();

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        //not sure if this is what we need but Im not super familiar with storing images in a website
        recipeDto.ImagePath = file.Name;
    }
    
    private async void CreateRecipe()
    {
        //temp value, will be overwritten in creatrecipe
        recipeDto.Calories = 0;
        var authState = await authenticationState;
        recipeDto.UserId = authState.User.FindFirst("sub")?.Value;

        var response = await recipeService.CreateRecipeAsync(recipeDto);
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        MudDialog.Close(DialogResult.Ok(true));
        navigationManager.NavigateTo("/createrecipe", true);
        StateHasChanged();
    }
}