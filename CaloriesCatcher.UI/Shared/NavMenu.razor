@using CaloriesCatcher.UI.Service.IService;
@using CaloriesCatcher.UI.Service
<AuthorizeView>
    <Authorized>
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="/about" Match="NavLinkMatch.All">About</MudNavLink>
            <MudNavGroup Title="User" Expanded="true">
                <MudNavLink Href="/profile" Match="NavLinkMatch.Prefix">Profile</MudNavLink>
                <MudNavLink OnClick="Logout" Match="NavLinkMatch.Prefix">Logout</MudNavLink>
            </MudNavGroup>

        </MudNavMenu>
    </Authorized>
    <NotAuthorized>
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavGroup Title="User" Expanded="true">
                <MudNavLink Href="/login" Match="NavLinkMatch.Prefix">Login</MudNavLink>
                <MudNavLink Href="/register" Match="NavLinkMatch.Prefix">Register</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="/about" Match="NavLinkMatch.All">About</MudNavLink>
        </MudNavMenu>
    </NotAuthorized>
</AuthorizeView>


@code {
    

    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;
    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;
    private async Task Logout()
    {
        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        await customAuthenticationStateProvider.UpdateAuthenticationState(null);
        navigationManager.NavigateTo("/", true);
    }

}