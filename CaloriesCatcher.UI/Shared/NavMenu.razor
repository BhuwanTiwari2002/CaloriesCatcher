@using CaloriesCatcher.UI.Service.IService;
@using CaloriesCatcher.UI.Service
<AuthorizeView>
    <Authorized>
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.SpaceDashboard">Dashboard</MudNavLink>
            <MudNavLink Href="/discover/recipes" Icon="@Icons.Material.Filled.BrunchDining" Match="NavLinkMatch.All">Discover Recipes</MudNavLink>
            <MudNavLink Href="/nutrition" Icon="@Icons.Material.Filled.FoodBank" Match="NavLinkMatch.All">Nutrition</MudNavLink>
            <MudNavLink Href="/createrecipe" Icon="@Icons.Material.Filled.EmojiFoodBeverage" Match="NavLinkMatch.All">Recipe</MudNavLink>
            <MudNavGroup Title="User" Expanded="true" Icon="@Icons.Material.Filled.SupervisedUserCircle">
                <MudNavLink Href="/profile" Icon="@Icons.Material.Outlined.VerifiedUser" Match="NavLinkMatch.Prefix">
                    Profile
                </MudNavLink>
                <MudNavLink Href="/subscribe" Icon="@Icons.Material.Outlined.Money" Match="NavLinkMatch.Prefix">
                                    Subscription
                                </MudNavLink>
                <MudNavLink OnClick="Logout" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Logout">Logout</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
            <AuthorizeView Roles="ADMIN">
               <Authorized Context="adminContext">
                   <MudNavGroup Title="Admin" Expanded="true" Icon="@Icons.Material.Filled.AdminPanelSettings">
                       <MudNavLink Href="/setting" Icon="@Icons.Material.Filled.Settings" Match="NavLinkMatch.All">Settings</MudNavLink>
                       <MudNavLink Href="/AdminDashboard" Icon="@Icons.Material.Filled.People" Match="NavLinkMatch.All">Users</MudNavLink>
                   </MudNavGroup>
               </Authorized>
           </AuthorizeView>
    </Authorized>
</AuthorizeView>


@code {
    [Inject]private NavigationManager navigationManager { get; set; } = default!;
    [Inject]AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;
    private async Task Logout()
    {
        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        await customAuthenticationStateProvider.UpdateAuthenticationState(null);
        navigationManager.NavigateTo("/", true);
    }
}