@page "/discover/recipes"
@using CaloriesCatcher.UI.Model.Edamam
@using CaloriesCatcher.UI.Service.IService
@using CaloriesCatcher.UI.Model
<MudText Style="text-align: center" Class="mt-5" Typo="Typo.h5">Receipe Discover</MudText>
<MudGrid>
        <MudItem xs="5" Class="mt-5" Style="margin: auto">
                <MudTextField Style="font-size: 20px" @bind-Value="SearchValue" Label="Search" Variant="Variant.Outlined"/>
            </MudItem>
        <MudItem xs="3">
            <MudSelect @bind-Value="selectedDiet" Label="Select a Diet" OpenIcon="@Icons.Material.Filled.FoodBank" AdornmentColor="Color.Secondary">
                @foreach (string item in edamamDiet)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudFab Class="ms-5" OnClick="searchByRecipe" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search"/>
        </MudItem>
    
</MudGrid>
<div>
    @if (_recipeModelEdamam != null)
    {
        <div class="recipe-container">
            @foreach (Hit hit in _recipeModelEdamam.Hits)
            {
                <MudCard class="recipe-card">
                    <div class="recipe-media">
                        <MudImage Src="@hit.Recipe.Image" Alt="@hit.Recipe.Label" />
                    </div>
                    <div class="recipe-content ms-5">
                        <MudText Typo="Typo.body1" Color="Color.Primary" Class="recipe-label">@hit.Recipe.Label</MudText>
                        <MudText Typo="Typo.body2"  Color="Color.Secondary" Class="recipe-label">Calories: @Math.Round(hit.Recipe.Calories, 3)</MudText>
                    </div>
                    <div style="text-align: center">
                        <MudIconButton @onclick="() => logRecipeToCalories(hit.Recipe.Calories, hit.Recipe.Label)" Icon="@Icons.Material.Filled.AddCircle" Size="Size.Large" Color="Color.Primary" ></MudIconButton>
                        <MudIconButton @onclick="() => addRecipe(hit.Recipe.Label, hit.Recipe.Calories, hit.Recipe.Image)" Icon="@Icons.Material.Filled.Favorite"  Size="Size.Large" Color="Color.Primary" Title="Add to Receipe">Favorite</MudIconButton>
                    </div>
                </MudCard>
            }
        </div>

    }
</div>

@code {
    /* Services */
    [Inject] private IEdamamAPI edamamService { get; set; } = default!;
    [Inject] private ICalories _calories { get; set; } = default;
    [Inject] private ISnackbar _snackbar { get; set; } = default!;
    [Inject] private IRecipe _recipe { get; set; } = default!;
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    
    /* Models */
    private RecipeModelEdamam _recipeModelEdamam;
    public string SearchValue { get; set;}
    private string[] edamamDiet = { string.Empty , "balanced", "high-fiber", "high-protein", "low-carb", "low-fat", "low-sodium"};
    public string selectedDiet { get; set; } = String.Empty;
    /* This gets the recipes from the Edamama API */
    public async void searchByRecipe()
    {
        string dietString = string.Empty;
        if (selectedDiet != string.Empty)
        {
            dietString = "&diet=" + selectedDiet;
        }
        _recipeModelEdamam = await edamamService.GetRecipe(new RecipeEdamaRequestDto(SearchValue, dietString));
        StateHasChanged();
    }

    private async Task logRecipeToCalories(double calories, string label)
    {
        var authState = await authenticationState;
        var result = await _calories.CreateCaloriesAsync(new CaloriesDto()
        {
            Calorie = Math.Round(calories, 3),
            CalorieName = label,
            Date = DateTime.Now,
            UserId = authState.User.FindFirst("sub")?.Value
        });
        if (result.IsSuccess == true)
        {
            _snackbar.Add($"{label} was added", Severity.Success);
        }
        else
        {
            _snackbar.Add($"Unable to add {label}", Severity.Error);
        }
    }

    private async Task addRecipe(string recipe, double calories, string imagePath)
    {
        var authState = await authenticationState;
        var response = await _recipe.CreateRecipeAsync(new RecipeDto()
        {
            UserId = authState.User.FindFirst("sub")?.Value,
            RecipeName = recipe,
            Calories = calories,
            ImagePath = imagePath
        });
        if (response.IsSuccess == true)
        {
            _snackbar.Add($"{recipe} was added", Severity.Success);
        }
        else
        {
            _snackbar.Add($"Unable to add {recipe}", Severity.Error);
        }
    }
}

<style>

            .recipe-card {
                max-width: 300px;
                border-radius: 15px;
                box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
                margin: 1rem;
                display: inline-block;
                overflow: hidden; 
            }
            
            .recipe-media {
                height: 200px; 
                width: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .recipe-media img {
                height: 100%; 
                width: 100%; 
                object-fit: cover; 
            }
            
            .recipe-content {
                padding: 0.5rem;
                display: flex;
                flex-direction: column;
                justify-content: space-between; 
                height: calc(100% - 150px); 
            }
            
            .recipe-label {
                background-color: var(--mud-palette-background-paper); 
                padding: 8px;
                font-weight: bold;
            }
</style>