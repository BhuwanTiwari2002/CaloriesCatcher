@page "/login"
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
@using KitchenComfort.Web.Models;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
@using System.Security.Claims;
@using System.IdentityModel.Tokens.Jwt;
<div class="mud-container">
    <MudPaper Elevation="1" Square="false" Class="pa-4 mt-5" Style="max-width: 450px; margin: auto;">
        <div class="text-center">
            <MudText Typo="Typo.h3" Color="Color.Primary">Login</MudText>
        </div>
        <EditForm Model="loginRequestDto" OnValidSubmit="OnLogin">
            <MudTextField @bind-Value="loginRequestDto.UserName" Label="Email" Variant="Variant.Outlined" InputType="InputType.Email" Class="mt-4" FullWidth />
            <MudTextField @bind-Value="loginRequestDto.Password" Label="Password" Variant="Variant.Outlined" Class="mt-4" InputType="InputType.Password" FullWidth />
            <div class="text-center mt-4">
                <MudButton ButtonType="ButtonType.Submit" Class="mt-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Info" Size="Size.Large">Save</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</div>

@code {

    [Inject]private IAuthService authService { get; set; } = default!;
    [Inject]private ISnackbar snackBar { get; set; } = default!;
    [Inject]private ITokenProvider tokenProvider { get; set; } = default!;
    [Inject]private NavigationManager navigationManager { get; set; } = default!;
    [Inject]AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;
    LoginRequestDto loginRequestDto = new LoginRequestDto();
    protected override async Task OnInitializedAsync()
    { }
    private async Task OnLogin(EditContext context) // Note: Changed to Task instead of void
    {
        var response = await authService.LoginAsync(loginRequestDto);
        if (response != null && response.IsSuccess)
        {
            // Gets the user Token and Information
            LoginResponseDto loginResponseDto = JsonConvert.DeserializeObject<LoginResponseDto>(Convert.ToString(response.Result));
            loginResponseDto.User.Name = "User";
            loginResponseDto.User.PhoneNumber = "920213123";
            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await customAuthenticationStateProvider.UpdateAuthenticationState(loginResponseDto);
            // Navigate to the home page
            navigationManager.NavigateTo("/", true);
            StateHasChanged();
        }
        else
        {
            snackBar.Add("Something went wrong", Severity.Error);
        }
    }
}