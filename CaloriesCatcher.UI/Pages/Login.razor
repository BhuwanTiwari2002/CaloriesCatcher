@page "/login"
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
@using KitchenComfort.Web.Models;
@using Newtonsoft.Json;

<MudContainer Class="pt-lg-7" Style="height: 1900px; margin: auto;">
    <MudPaper Elevation="3" Class="mud-theme-background" Style="padding: 2.5rem; height: 30%; border-radius: 15px; display: flex;">
        <div Style="flex: 1; padding-right: 2rem; margin-top: 5%;">
            <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-lg-4 fw-bold">Welcome back.</MudText>
            <MudText Typo="Typo.body1" Color="Color.Default" Class="mb-lg-12">Don't have an account? <MudLink Href="/Register" Color="Color.Secondary">Sign up</MudLink></MudText>

            <EditForm Model="loginRequestDto" OnValidSubmit="OnLogin" Class="mt-lg-7 mb-lg-6">
                <MudTextField @bind-Value="loginRequestDto.UserName" Label="Email" Variant="Variant.Outlined" InputType="InputType.Text" FullWidth Class="mb-lg-5" Rounded="true"/>
                <MudTextField @bind-Value="loginRequestDto.Password" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" FullWidth Class="mb-4" Rounded="true"/>
                <MudText Typo="Typo.body2" Color="Color.Default" Class="mb-lg-12"><MudLink Href="/forgot-password" Color="Color.Secondary">Forgot Password?</MudLink></MudText>
                <div class="mt-lg-9">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Login" Color="Color.Primary" Size="Size.Large" Class="mr-4">Sign in</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Google" Color="Color.Primary" Size="Size.Large" @onclick="OnGoogleLogin">Login with Google</MudButton>
                </div>
            </EditForm>

            @if(IsLoading)
            {
                <MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" />
            }
        </div>
        <div Style="flex: 1; display: flex; justify-content: center; align-items: center;">
            <MudImage Src="images/LoginSideImage.jpg" Width="700" Alt="Graphic Details" Style="border-radius: 15px;"/>
        </div>
    </MudPaper>
</MudContainer>

@code {
    [Inject]
    private IAuthService authService { get; set; } = default!;
    [Inject]
    private ISnackbar snackBar { get; set; } = default!;
    [Inject]
    private ITokenProvider tokenProvider { get; set; } = default!;
    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;
    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;
    
    LoginRequestDto loginRequestDto = new LoginRequestDto();
    private bool IsLoading = false;
    public int Value { get; set; }
    private async Task OnLogin(EditContext context)
    {
        IsLoading = true; // Start loading indication
        var response = await authService.LoginAsync(loginRequestDto);
        IsLoading = false; // End loading indication
        if (response != null && response.IsSuccess)
        {
            LoginResponseDto loginResponseDto = JsonConvert.DeserializeObject<LoginResponseDto>(Convert.ToString(response.Result));
            loginResponseDto.User.Name = "User";
            loginResponseDto.User.PhoneNumber = "920213123";
            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await customAuthenticationStateProvider.UpdateAuthenticationState(loginResponseDto);
            navigationManager.NavigateTo("/", true);
            StateHasChanged();
        }
        else
        {
            var errorMessage = response.Message ?? "Something went wrong";
            snackBar.Add(errorMessage, Severity.Error);
        }
    }

    private void OnGoogleLogin()
    {
        authService.StartGoogleLogin();
    }

    public async void SimulateProgress()
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        SimulateProgress();
    }

    protected override void OnInitialized() => SimulateProgress();

    bool _disposed;
    public void Dispose() => _disposed = true;
}
