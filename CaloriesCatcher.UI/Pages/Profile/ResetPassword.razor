@page "/reset-password"
@using CaloriesCatcher.UI.Model;
@using CaloriesCatcher.UI.Service.IService;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Net;

<div class="mud-main-content">
    <MudContainer>
        <MudPaper Elevation="3" Square="false" Class="mt-5 p-4">
            <MudText Typo="Typo.h4" Class="text-center mb-4">Reset Password</MudText>
            <MudText Typo="Typo.h6" Class="text-center mb-4">Enter the code you received in the email, along with your new password.</MudText>

            <MudItem xs="12" sm="8" md="6" lg="4" Class="mx-auto">
                <MudTextField Label="Email" @bind-Value="_userEmailInput" FullWidth Margin="Margin.Normal" Variant="Variant.Outlined" />
                <MudTextField Label="Code" @bind-Value="_resetCode" FullWidth Margin="Margin.Normal" Variant="Variant.Outlined" />
                <MudTextField Label="New Password" @bind-Value="_newPassword" FullWidth Margin="Margin.Normal" InputType="InputType.Password" Variant="Variant.Outlined" />
                <MudTextField Label="Confirm Password" @bind-Value="_confirmPassword" FullWidth Margin="Margin.Normal" InputType="InputType.Password" Variant="Variant.Outlined" />
            </MudItem>

            <div class="text-center mt-4 mb-2">
                <MudButton Color="Color.Primary" OnClick="HandleResetPassword">Reset Password</MudButton>
            </div>

            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-3" />
            }

            @if (!_isLoading && !string.IsNullOrEmpty(_responseMessage))
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mt-4"> @_responseMessage </MudAlert>
            }
        </MudPaper>
    </MudContainer>
</div>

@code {
    [Inject] IAuthService _authService { get; set; } = default!;
    [Inject] NavigationManager NavManager { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    private string _resetCode = string.Empty;
    private string _newPassword = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _responseMessage = string.Empty;
    private string _userEmailInput = string.Empty;
    private string Token = string.Empty;
    private bool _isLoading = false;
    public int Value { get; set; } = 0;
    public int BufferValue { get; set; } = 10;

    protected override void OnInitialized()
    {
        var uri = NavManager.Uri;
        var query = new Uri(uri).Query;
        Token = QueryHelpers.ParseQuery(query)["token"];
    }

    

    private async Task HandleResetPassword()
    {
        _isLoading = true;
        Value = 25;
        StateHasChanged();
        var authState = await authenticationState;
        Value = 50;
        StateHasChanged();
        var request = new PasswordResetRequest
            {
                Email = _userEmailInput,
                Token = Token,
                ResetCode = _resetCode,
                NewPassword = _newPassword,
            };
        Value = 75;
        StateHasChanged();
        var response = await _authService.ResetPasswordAsync(request);
        Value = 100;
        StateHasChanged();
        await Task.Delay(500);
        _responseMessage = response.Message.ToString() ?? "No response";
        _isLoading = false;
        StateHasChanged();
    }
}