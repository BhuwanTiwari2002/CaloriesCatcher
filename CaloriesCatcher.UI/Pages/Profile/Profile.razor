@page "/profile"
@using CaloriesCatcher.UI.Components.Dialogs
@using CaloriesCatcher.UI.Model;
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
@using KitchenComfort.Web.Models;
@using Newtonsoft.Json;
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h3">Profile</MudText>
        </MudPaper>
    </MudItem>

    <MudPaper Class="d-flex align-center justify-center mx-auto" Elevation=" 3" Width="35%">
        <MudItem>
            <MudList>
                <MudIcon Style="float:right" Class="mt-4 d-flex align-content-end" Icon="@Icons.Material.Filled.Edit" Title="Edit" @onclick="EditUserDetail" />
                <MudListItem><MudTextField @bind-Value="@userDetail.Height" Label="Height" ReadOnly="true" Variant="Variant.Text" /></MudListItem>
                <MudListItem><MudTextField @bind-Value="@userDetail.Weight" Label="Weight" ReadOnly="true" Variant="Variant.Text" /></MudListItem>
                <MudListItem><MudTextField @bind-Value="@userDetail.DailyCalories" Label="Daily Calories" ReadOnly="true" Variant="Variant.Text" /></MudListItem>
                <MudListItem><MudTextField @bind-Value="@userDetail.Gender" Label="Gender" ReadOnly="true" Variant="Variant.Text" /></MudListItem>
                <MudListItem><MudTextField @bind-Value="@userDetail.BirthDate" Label="Birthday" ReadOnly="true" Variant="Variant.Text" /></MudListItem>
            </MudList>
        </MudItem>
    </MudPaper>
</MudGrid>
<CaloriesCatcher.UI.Components.CalorieFooter />
@code {
    [Inject] private ISnackbar snackBar { get; set; } = default!;
    [Inject] IUserDetailService userDetailService { get; set; } = default!;
    [Inject] IDialogService dialogService { get; set; } = default!;
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    public UserDetail userDetail = new UserDetail();     

    protected override async Task OnInitializedAsync()
    {
        await GetUserDetailData();        
    }

    async Task GetUserDetailData()
    {
        var authState = await authenticationState;
        var response = await userDetailService.GetByUser(authState.User.FindFirst("Sub")?.Value);

        if (response != null && response.IsSuccess && response.Result != null)
        {
           userDetail = JsonConvert.DeserializeObject<UserDetail>(Convert.ToString(response.Result));
        }
        else
        {
           userDetail = CreateDefaultUserDetail(authState.User.FindFirst("Sub")?.Value);
            //EditUserDetail();
        }
    }
    private async Task EditUserDetail()
    {
        var parameters = new DialogParameters();
        parameters.Add("userDetail", userDetail);
        var dialogResult = await dialogService.Show<UserDetailEditFieldInput>("Your Profile", parameters).Result;
        snackBar.Add("Profile Updated", Severity.Normal);
        await GetUserDetailData();
    }

    private UserDetail CreateDefaultUserDetail(string userId)
    {
        return new UserDetail
        {
            UserId = userId,
            Height = 0,
            Weight = 0,
            DailyCalories = 0,
            BirthDate = DateTime.Now,
            Gender = "Assign Gender",
        };
    }
}