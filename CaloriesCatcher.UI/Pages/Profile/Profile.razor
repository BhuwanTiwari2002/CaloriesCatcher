@page "/profile"
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
@using KitchenComfort.Web.Models;
@using CaloriesCatcher.UI.Model;
@using Newtonsoft.Json;

@if(isLoading)
{
    <div>Loading...</div>
}
else
{
    <div class="mud-container">
        <MudPaper Elevation="1" Square="false" Class="pa-4 mt-5" Style="max-width: 450px; margin: auto;">
            <div class="text-center">
                <MudText Typo="Typo.h3" Color="Color.Primary">Your Profile</MudText>
            </div>
            <EditForm Model="userDetail">
                <MudText>User Id: @UserId </MudText>
                <MudText>Height: @Height </MudText>
                <MudText>Weight: @Weight </MudText>
                <MudText>Daily Calories: @DailyCalories </MudText>
                <MudText>Birthday: @BirthDay.ToShortDateString() </MudText>
                <MudText>Gender: @Gender </MudText>

                <MudText>UserName: @UserId </MudText>
                @*Add Reset Password Btn Here *@
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit"></MudIconButton>
            </EditForm>
        </MudPaper>
    </div>
}

@code {
    [Inject] private IAuthService authService { get; set; } = default!;
    [Inject] private ISnackbar snackBar { get; set; } = default!;
    [Inject] IUserDetailService userDetailService { get; set; } = default!;

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; } = default!;

    bool isLoading = true;

    UserDetail userDetail = new UserDetail();

    public string UserId { get; set; } = string.Empty;
    public int Height { get; set; }
    public int Weight { get; set; }
    public Decimal DailyCalories { get; set; }
    public DateTime BirthDay { get; set; }
    public string Gender { get; set; } = string.Empty;

    void EditData()
    {
        snackBar.Add("Edit Btn Working");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserDetailData(); 
        isLoading = false;
    }

    async Task GetUserDetailData()
    {
        var authState = await authenticationState;
        var response = await userDetailService.GetByUser(authState.User.FindFirst("Sub")?.Value);

        if (response != null && response.IsSuccess)
        {
            //var t = response;
            var t = JsonConvert.DeserializeObject<UserDetail>(Convert.ToString(response.Result));
            //StateHasChanged();
            if (t != null)
            {
                UserId = t.UserId;
                Height = t.Height;
                Weight = t.Weight;
                DailyCalories = t.DailyCalories;
                BirthDay = t.BirthDate;
                Gender = t.Gender;

                //userDetail = t;                
            }
        }
    }
}