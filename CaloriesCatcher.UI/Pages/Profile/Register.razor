@page "/register"
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Service.IService
@using KitchenComfort.Web.Models;
@using Newtonsoft.Json
<div class="mud-container">
    <MudPaper Elevation="1" Square="false" Class="pa-4 mt-5" Style="max-width: 450px; margin: auto;">
        <div class="text-center">
            <MudText Typo="Typo.h3" Color="Color.Primary">Register</MudText>
        </div>
        <EditForm Model="registerationRequestDto" OnValidSubmit="OnRegister">
            <MudTextField @bind-Value="registerationRequestDto.UserName" Label="Name" Variant="Variant.Outlined" Class="mt-4" FullWidth />
            <MudTextField @bind-Value="registerationRequestDto.Email" Label="Email" Variant="Variant.Outlined" Class="mt-4" FullWidth  />
            <MudTextField @bind-Value="registerationRequestDto.PhoneNumber" Label="Phone Number" Variant="Variant.Outlined" Class="mt-4" FullWidth  />
            <MudTextField @bind-Value="registerationRequestDto.Password" Label="Password" Variant="Variant.Outlined" Class="mt-4" FullWidth InputType="InputType.Password" />
            <div class="text-center mt-4">
                <MudButton ButtonType="ButtonType.Submit" Class="mt-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Info" Size="Size.Large">Save</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</div>

@code {
    [Inject]private IAuthService authService { get; set; } = default!;
    [Inject]private ISnackbar snackBar { get; set; } = default!;
    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;
    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;
    RegisterationRequestDto registerationRequestDto = new RegisterationRequestDto();
    protected override async Task OnInitializedAsync()
    {}
    private async void OnRegister(EditContext context)
    {
        registerationRequestDto.RoleName = "Basic";
        var response = await authService.RegisterAsync(registerationRequestDto);
        if(response != null && response.IsSuccess)
        {
            snackBar.Add("The account has been registered", Severity.Success);
            snackBar.Add("Now Logging you in", Severity.Success);
            var login = await authService.LoginAsync(new LoginRequestDto()
            {
                UserName = registerationRequestDto.Email,
                Password = registerationRequestDto.Password
            });
            if (login != null && login.IsSuccess)
            {
                LoginResponseDto loginResponseDto = JsonConvert.DeserializeObject<LoginResponseDto>(Convert.ToString(login.Result));
                loginResponseDto.User.Name = "User";
                loginResponseDto.User.PhoneNumber = "920213123";
                var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
                await customAuthenticationStateProvider.UpdateAuthenticationState(loginResponseDto);
                navigationManager.NavigateTo("/", true);
                StateHasChanged();
            } else
            {
                snackBar.Add(response.Message, Severity.Error);
            }
        } else
        {
            snackBar.Add("Something went wrong", Severity.Error);
        }
    }

}