@page "/forgot-password"
@using CaloriesCatcher.UI.Service.IService

<MudOverlay Fullscreen="true" IsVisible="@_isLoading" DarkenBackground="true"></MudOverlay>

<div class="mud-main-content">
    <MudContainer>
        <MudPaper Elevation="3" Square="false" Class="mt-5 p-4">
            <MudText Typo="Typo.h3" Class="text-center mt-2">Forgot Password</MudText>
            <MudText Typo="Typo.h6" Class="text-center mt-2">Enter your email address and we'll send you a link and a code to reset your password.</MudText>

            <MudItem xs="12" sm="8" md="6" lg="4" Class="mx-auto">
                <MudTextField Label="Email" @bind-Value="_email" FullWidth Margin="Margin.Normal" Variant="Variant.Outlined" />
            </MudItem>

            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-3" />
            }
            @if (!string.IsNullOrEmpty(_responseMessage))
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mt-4"> @_responseMessage </MudAlert>
            }

            <div class="text-center mt-4 mb-2">
                <MudButton Color="Color.Primary" OnClick="HandleForgotPassword">Submit</MudButton>
            </div>
        </MudPaper>
    </MudContainer>
</div>
<CaloriesCatcher.UI.Components.CalorieFooter />

@code {
    [Inject] IAuthService _authService { get; set; } = default!;
    private string _email;
    private string _responseMessage;
    private bool _isLoading = false;
    public int Value { get; set; } = 0;
    public int BufferValue { get; set; } = 0;

    private async Task HandleForgotPassword()
    {
        _isLoading = true;
        await StartProgress(0, 25);  // Initialize the progress bar

        var response = await _authService.ForgotPasswordAsync(_email);

        await UpdateProgress(50);  // Progress after API call

        _responseMessage = response.Message.ToString() ?? "No response";

        await CompleteProgress(100);  // Complete the progress bar

        _isLoading = false;
    }

    private async Task StartProgress(int startValue, int bufferValue)
    {
        Value = startValue;
        BufferValue = bufferValue;
        StateHasChanged();
        await Task.Delay(30);
    }

    private async Task UpdateProgress(int newValue)
    {
        Value = newValue;
        BufferValue += 10;  // You can adjust this increment as needed
        StateHasChanged();
        await Task.Delay(30);
    }

    private async Task CompleteProgress(int finalValue)
    {
        Value = finalValue;
        StateHasChanged();
        await Task.Delay(30);
    }
}
