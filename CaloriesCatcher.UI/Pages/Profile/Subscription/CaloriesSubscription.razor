@page "/subscribe"
@using CaloriesCatcher.UI.Model
@using CaloriesCatcher.UI.Service;
@using Microsoft.Extensions.Options
@using System.Security.Claims

<MudCard Elevation="3" Outlined="true" Class="mt-5 mx-auto" Style="max-width: 500px;">
    <MudCardContent>
        <MudSelect T="Subscription" @bind-Value="SelectedSubscription">
            <MudSelectItem Value="@TurtleSubscription">Turtle (Free)</MudSelectItem>
            <MudSelectItem Value="@ElephantSubscription">Elephant ($0.99)</MudSelectItem>
            <MudSelectItem Value="@ParrotSubscription">Parrot ($1.99)</MudSelectItem>
        </MudSelect>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Subscribe" Class="mt-3">Subscribe Now</MudButton>
    </MudCardContent>
</MudCard>
<MudGrid Class="mt-5 px-5"> 
    <MudItem xs="12" Class="d-flex flex-column align-center justify-center">
        <MudText Typo="Typo.h3" Class="mb-5">Subscription Details</MudText>
    </MudItem>
    <MudItem xs="12" sm="4">
        <div style="background-color: skyblue; color: black; border-radius: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);" class="d-flex flex-column align-center justify-center py-8">
            <MudImage Class="my-4" Src="images/turtle.png" Alt="turtle badge image" Width="100" Height="70"></MudImage>
            <MudText Typo="Typo.h4">Turtle Plan</MudText>
            <MudText>Come try it out for a week on us! <br/> No Purchase Necessary</MudText>
        </div>
    </MudItem>

    <MudItem xs="12" sm="4">
        <div style="background-color: skyblue; color: black; border-radius: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);" class="d-flex flex-column align-center justify-center py-8">
            <MudImage Src="images/elephant.png" Alt="elephant badge image" Width="100" Height="100"></MudImage>
            <MudText Typo="Typo.h4">Elephant Plan</MudText>
            <MudText>Join for 1 month at a time. <br/> $0.99 per month</MudText>
        </div>
    </MudItem>

    <MudItem xs="12" sm="4">
        <div style="background-color: skyblue; color: black; border-radius: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);" class="d-flex flex-column align-center justify-center py-8">
            <MudImage Src="images/parrot.png" Alt="parrot badge image" Width="50" Height="100"></MudImage>
            <MudText Typo="Typo.h4">Parrot Plan</MudText>
            <MudText>Love it so much, join us for 1 year.<br/> $1.99 per year</MudText>
        </div>
    </MudItem>
</MudGrid>
<MudGrid>
<MudItem xs="12" sm="12">
        <div style="  border-radius: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);" class="d-flex flex-column align-center justify-center py-8">
            
            
            <MudText>All payments are done using Stripe Payment. If you use Stripe Payment, you accept and agree to the terms applicable to that payment method.  </MudText>
        </div>
    </MudItem>
</MudGrid>
@code {
    [Inject] StripePaymentsService stripeService { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] ISnackbar snackbar { get; set; }
    [Inject] IOptions<StripeSettings> stripeSettings { get; set; }
    public Subscription TurtleSubscription { get; set; }
    public Subscription ElephantSubscription { get; set; } 
    public Subscription ParrotSubscription { get; set; } 
    public string role { get; set; } = string.Empty;
    public string username { get; set; } = string.Empty;
    Subscription SelectedSubscription;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        role = authState.User.FindFirst(ClaimTypes.Role)?.Value;
        username = authState.User.FindFirst("sub")?.Value;
        if (string.IsNullOrEmpty(role))
        {
            role = "Turtle";
        }
        SelectedSubscription = new Subscription();
        TurtleSubscription = new  Subscription { Name = "Turtle", MonthlyPrice = 0.00M };
        ElephantSubscription = new Subscription { Name = "Elephant", MonthlyPrice = 0.99M, PriceId = "price_1O3kU6CvoZQgmYDTz2m2Q4Sx" };
        ParrotSubscription = new Subscription { Name = "Parrot", MonthlyPrice = 1.99M, PriceId = "price_1O3kVYCvoZQgmYDTLLokRW7M" };
        if (role.ToLower() == TurtleSubscription.Name.ToLower())
        {
            SelectedSubscription = TurtleSubscription;  
        } else if (role.ToLower() == ElephantSubscription.Name.ToLower())
        {
            SelectedSubscription = ElephantSubscription;
        }
        else
        {
            SelectedSubscription = ParrotSubscription;
        }
        
        
    }

    private async Task Subscribe()
    {
        if (SelectedSubscription.Name.ToLower() == role.ToLower())
        {
            snackbar.Add("You already have this subscription");
        }
        else
        {
            var priceId = SelectedSubscription.PriceId;  // Assume you have the price ID from the selected subscription
            var sessionId = await stripeService.CreateCheckoutSessionAsync(priceId);
            await RedirectToCheckout(sessionId.ToString());
        }
    }

    private async Task RedirectToCheckout(string sessionId)
    {
        var redirectToCheckoutJs = @"
        var stripe = Stripe('" + stripeSettings.Value.PublishableKey + @"');
        stripe.redirectToCheckout({ sessionId: '" + sessionId + @"' })
            .then(function (result) {
                if (result.error) {
                    alert(result.error.message);
                }
            });
        ";
        await JSRuntime.InvokeVoidAsync("eval", redirectToCheckoutJs);
    }
}
