@page "/createrecipe"
@using CaloriesCatcher.UI.Components;
@using CaloriesCatcher.UI.Components.Dialogs;
@using CaloriesCatcher.UI.Model;
@using CaloriesCatcher.UI.Service.IService;
@using Newtonsoft.Json;
<link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h2">Create a Recipe</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="true">
                <MudText Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">@RecentRecipeId.RecipeName</MudText>
                <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="newIngredientName" />
                <MudTextField T="double" Variant="Variant.Outlined" @bind-Value="newIngredientQuantity" />
                <MudButton OnClick="AddIngredient">Add an Item</MudButton>
            </MudButtonGroup>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudItem xs="12" md="6">
                <MudText Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">Ingredients List</MudText>
                <MudPaper Width="100%">
                    <MudList>
                        @foreach (var RecipeIngredientDto in recipeIngredients)
                        {
                            <li>@RecipeIngredientDto.Quantity cup(s) @RecipeIngredientDto.IngredientName<MudButton @onclick="() => DeleteIngredient(RecipeIngredientDto.RecipeIngredientsId)" Color="Color.Error">Delete</MudButton></li>
                        }
                    </MudList>
                </MudPaper>

            </MudItem>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton OnClick="AddRecipeToDb" Variant="Variant.Filled" Color="Color.Primary">Save Recipe</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Class="mx-4">Save Recipe & Add to Day</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
        </MudPaper>
    </MudItem>

</MudGrid>








@code
{
    //injections
    [Inject] IDialogService dialogService { get; set; } = default!;
    [Inject] IRecipe _recipeService { get; set; } = default!;
    [Inject] IRecipeIngredients _ingredientservice { get; set; } = default!;
    [Inject] private NavigationManager navigationManager { get; set; } = default!;
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;

    //data lists
    List<RecipeIngredientDto> recipeIngredients = new List<RecipeIngredientDto>();
    List<Calories.API.Models.Dto.RecipeDto> listOfRecipes = new List<Calories.API.Models.Dto.RecipeDto>();

    //single variables
    Calories.API.Models.Dto.RecipeDto RecentRecipeId = new Calories.API.Models.Dto.RecipeDto();
    Calories.API.Models.Dto.RecipeDto UpdatedRecipeCalories = new Calories.API.Models.Dto.RecipeDto();
    private string newIngredientName;
    private double newIngredientQuantity;
    public string UserId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        GetUserIdAndRecipes();

    }

    async private void GetUserIdAndRecipes()
    {
        var authState = await authenticationState;
        var response = await _recipeService.GetRecipesByUserAsync(authState.User.FindFirst("Sub")?.Value);
        UserId = authState.User.FindFirst("sub")?.Value;
        if (response != null && response.IsSuccess)
        {
            listOfRecipes = JsonConvert.DeserializeObject<List<Calories.API.Models.Dto.RecipeDto>>(Convert.ToString(response.Result));
            RecentRecipeId = listOfRecipes.LastOrDefault();
            StateHasChanged();
        }
        else
        {
            //snackBar.Add("Something went wrong", Severity.Error);
        }
    }

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredientName))
        {
            recipeIngredients.Add(new RecipeIngredientDto { IngredientName = newIngredientName, Quantity = newIngredientQuantity });
            newIngredientName = string.Empty;
            newIngredientQuantity = 0;

        }
    }

    private void DeleteIngredient(int id)
    {
        try
        {
            recipeIngredients.RemoveAt(id);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }

    }

    private void AddRecipeToDb()
    {
        //Upload flat list of Ingredients + Quantity

        var TempAPIInformation = new System.Text.StringBuilder();

        foreach (RecipeIngredientDto recipeIngredientDto in recipeIngredients)
        {
            TempAPIInformation.AppendLine(recipeIngredientDto.Quantity.ToString() + " " + recipeIngredientDto.IngredientName);
            //send TempAPIInformation to the API
        }
        //after foreach hit an
        //UpdatedRecipeCalories.Calories = API Response
        //_recipeService.UpdateRecipeAsync(UpdatedRecipeCalories);

        foreach (RecipeIngredientDto recipeIngredientDto in recipeIngredients)
        {
            recipeIngredientDto.RecipeId = RecentRecipeId.RecipeId;
            _ingredientservice.CreateRecipeIngredientAsync(recipeIngredientDto);
        }
        navigationManager.NavigateTo("/discover/recipes", true);
    }

}