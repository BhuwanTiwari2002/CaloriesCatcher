@page "/createrecipe"
@using CaloriesCatcher.UI.Components;
@using CaloriesCatcher.UI.Model;
@using CaloriesCatcher.UI.Service.IService;
@using Newtonsoft.Json;
@using CaloriesCatcher.UI.Service
@using CaloriesCatcher.UI.Model;
@using RecipeCatcher.UI.Service;
<link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h2">Create a Recipe</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="true">
                <MudTextField T="string" Variant="Variant.Outlined" Text="" @bind-Value="newIngredient" />
                <MudButton OnClick="AddIngredient">Add an Item</MudButton>
                <MudButton OnClick="DeleteIngredient">Delete an Item</MudButton>
                <MudButton OnClick="AddRecipeToDb">Edit an Item</MudButton>
                <MudButton>Add an Step</MudButton>
                <MudButton>Edit an Step</MudButton>
                <MudButton>Delete an Step</MudButton>
            </MudButtonGroup>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudItem xs="12" md="6">
                <MudText Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">Ingredients List</MudText>
                <MudPaper Width="100%">
                    <MudList>
                        @foreach (var RecipeIngredientDto in recipeIngredients)
                        {
                            <li>@RecipeIngredientDto.IngredientName</li>
                        }
                    </MudList>
                </MudPaper>

            </MudItem>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudTextField T="string" Label="Steps:" Variant="Variant.Outlined" Text="@sampleText" Lines="3" />
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton OnClick="AddRecipeToDb" Variant="Variant.Filled" Color="Color.Primary">Save Recipe</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Class="mx-4">Save Recipe & Add to Day</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
        </MudPaper>
    </MudItem>

</MudGrid>

@code
{
    [Inject] IDialogService dialogService { get; set; } = default!;
    [Inject] private IRecipe recipeService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;

    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";

    List<RecipeIngredientDto> recipeIngredients = new List<RecipeIngredientDto>();

    private string? newIngredient;
    //temp data until ui is finished
    private string RecipeName = "Test";
    private int RecipeId = 123;
    private double Calories = 99.9;
    private string ImagePath = "Test";

    CaloriesCatcher.UI.Model.RecipeDto recipeDto = new RecipeDto();

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredient))
        {
            recipeIngredients.Add(new RecipeIngredientDto { IngredientName = newIngredient });
            newIngredient = string.Empty;
        }
    }

    private void DeleteIngredient()
    {
        try
        {
            recipeIngredients.RemoveAt(recipeIngredients.Count - 1);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }

    }

    private async void AddRecipeToDb()
    {
        recipeDto.RecipeId = RecipeId;
        recipeDto.RecipeName = RecipeName;
        recipeDto.Calories = Calories;
        recipeDto.ImagePath = ImagePath;
        //needs: Recipe Id, Recipe Name, and Foreach recipe/food it needs and Id, Name and Quantity, passed in Recipe Id, Passed in UserId, Generated Recipe/food Id
        var authState = await authenticationState;
        recipeDto.UserId = authState.User.FindFirst("sub")?.Value;
        recipeService.CreateRecipeAsync(recipeDto);
    }

    //async void OpenDialog()
    //{
    //    DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
    //    var dialog = dialogService.Show<IngredientAdd>("Add Ingredient", closeOnEscapeKey);
        
    //    var result = await dialog.Result;
    //}

}
