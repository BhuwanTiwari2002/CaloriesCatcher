@page "/recipe"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<div style="margin-left: 15%; margin-right:15%">
<MudTable  Items="@Elements" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<Element,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Recipes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>

    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Calories)">Calories</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Element, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.PrepTime)">Prep Time</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.CookTime)">Cook Time</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Calories">@context.Calories</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="PrepTime">@context.PrepTime</MudTd>
        <MudTd DataLabel="CookTime">@context.CookTime</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Calories">
            <MudTextField @bind-Value="@context.Calories" Required />
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
         <MudTd DataLabel="PrepTime">
             <MudTextField @bind-Value="@context.PrepTime" Required Min="1" />
        </MudTd>
        <MudTd DataLabel="CookTime">
            <MudTextField @bind-Value="@context.CookTime" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@* <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
<MudSwitch @bind-Checked="@canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
<MudSwitch @bind-Checked="@blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch> *@
@* <MudGrid>
    <MudItem xs="12" md="4">
        <MudSelect Label="Edit Trigger" T="TableEditTrigger" @bind-Value="editTrigger">
            <MudSelectItem Value="TableEditTrigger.RowClick">Row Click</MudSelectItem>
            <MudSelectItem Value="TableEditTrigger.EditButton">Edit Button</MudSelectItem>
        </MudSelect>
    </MudItem>
    @if (editTrigger == TableEditTrigger.EditButton)
    {
        <MudItem xs="12" md="4">
            <MudSelect Label="Edit Button Postion" T="TableEditButtonPosition" @bind-Value="editButtonPosition">
                <MudSelectItem Value="TableEditButtonPosition.Start">Start</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.End">End</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.StartAndEnd">Start and End</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    <MudItem xs="12" md="4">
        <MudSelect Label="Apply Button Postion" T="TableApplyButtonPosition" @bind-Value="applyButtonPosition">
            <MudSelectItem Value="TableApplyButtonPosition.Start">Start</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.End">End</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.StartAndEnd">Start and End</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>

<MudExpansionPanels Style="flex: 1;">
    <MudExpansionPanel Text="Show inline-edit event log">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
    </MudExpansionPanels> *@
</div>
@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Element selectedItem1 = null;
    private Element elementBeforeEdit;
    private HashSet<Element> selectedItems1 = new HashSet<Element>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private List <Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements.Add(new Element
            {
                Id = "1",
                Calories = "100",
                Name = "Grapes",
                PrepTime = "1 min",
                CookTime = "1 min"

            });
        Elements.Add(new Element
            {
                Id = "1",
                Calories = "400",
                Name = "Egg Salad",
                PrepTime = "4 min",
                CookTime = "6 min"

            });
        Elements.Add(new Element
            {
                Id = "1",
                Calories = "100",
                Name = "Grapes",
                PrepTime = "1 min",
                CookTime = "1 min"

            });
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Calories = ((Element)element).Calories,
                Name = ((Element)element).Name,
                CookTime = ((Element)element).CookTime,
                PrepTime = ((Element)element).PrepTime
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Element)element).Name}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Element)element).Calories = elementBeforeEdit.Calories;
        ((Element)element).Name = elementBeforeEdit.Name;
        ((Element)element).CookTime = elementBeforeEdit.CookTime;
        ((Element)element).PrepTime = elementBeforeEdit.PrepTime;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Element)element).Name} canceled");
    }

    private bool FilterFunc(Element element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Calories.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.PrepTime} {element.CookTime}".Contains(searchString))
            return true;
        return false;
    }

    public class Element
    {
        public string Id { get; set; }
        public string Calories { get; set; }
        public string Name { get; set; }
        public string PrepTime { get; set; }
        public string CookTime { get; set; }
    }

  
}