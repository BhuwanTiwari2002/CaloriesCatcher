<AuthorizeView Roles="ADMIN, TURTLE, ELEPHANT, PARROT, CAT, BASIC">
    <Authorized>
        @page "/"
        @using CaloriesCatcher.UI.Components;
        @using CaloriesCatcher.UI.Model;
        @using CaloriesCatcher.UI.Service.IService;
        @using Newtonsoft.Json;
        <div style="float:left; width:40%; margin: 20px;">
            <MudText>User Id: @UserId</MudText>
            <MudText Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">Today's Details</MudText>
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="i" InputLabels="@labels" Width="35%" Height="35%"/>
            </MudPaper>
            <MudPaper Class="pa-4 mt-2 d-flex justify-center">
                <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">Log Calories</MudButton>
                <MudButton @onclick="EditData" Variant="Variant.Filled" Class="mx-4">Edit Food</MudButton>
                <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Delete Food</MudButton>
            </MudPaper>
            <div style="text-align:center; margin-top:2%;">
                <MudButton Color="Color.Primary" Variant="Variant.Text">Track a food</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Text">Track a recipe</MudButton>
            </div>
        </div>
        <div style="float:right; width:40%;margin-top:3%; margin-right:3%; margin-bottom:5%;">
            <MudItem xs="12" md="6">
                <MudText Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">Today's Progress</MudText>
                <MudPaper Width="100%">
                    <MudTable Items="caloriesDtos" Class="calories-table">
                        <HeaderContent>
                            <MudTh>Calorie Name</MudTh>
                            <MudTh>Calorie Value</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="items">
                            <MudTd>@items.CalorieName</MudTd>
                            <MudTd>@items.Calorie</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorzied/>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Inject]
    private ICalories caloriesService { get; set; } = default!;

    [Inject]
    private ISnackbar snackBar { get; set; } = default!;

    [Inject]
    IDialogService dialogService { get; set; } = default!;

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; } = default!;

    public string UserId { get; set; }
    List<CaloriesDto> caloriesDtos = new List<CaloriesDto>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCaloriesData();
    }

    int i = -1;
    int dataSize = 4;
    double[] data = { 77, 25, 20, 5 };
    string[] labels = { "Breakfast", "Lunch", "Dinner", "snacks" };
    // change to edit
    void EditData()
    {
    /* var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
        new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged(); */
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
        }
    }

    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
        }
    }

    async Task RefreshCaloriesData()
    {
        var authState = await authenticationState;
        var response = await caloriesService.GetCaloriesByUserAsync(authState.User.FindFirst("Sub")?.Value);
        UserId = authState.User.FindFirst("sub")?.Value;
        if (response != null && response.IsSuccess)
        {
            caloriesDtos = JsonConvert.DeserializeObject<List<CaloriesDto>>(Convert.ToString(response.Result));
            StateHasChanged();
        }
        else
        {
            snackBar.Add("Something went wrong", Severity.Error);
        }
    }

    async void OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog = dialogService.Show<CaloriesLog>("Calories Log", closeOnEscapeKey);
        var result = await dialog.Result;
    }

}