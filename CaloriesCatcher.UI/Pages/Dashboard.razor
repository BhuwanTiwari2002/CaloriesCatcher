<AuthorizeView Roles="ADMIN, TURTLE, ELEPHANT, PARROT, CAT, BASIC">
    <Authorized>
        @page "/"
        @using CaloriesCatcher.UI.Components;
        @using CaloriesCatcher.UI.Components.Dialogs
        @using CaloriesCatcher.UI.Model;
        @using CaloriesCatcher.UI.Service.IService;
        @using Microsoft.AspNetCore.Authentication.OAuth.Claims
        @using Newtonsoft.Json;
@using RecipeDto = Calories.API.Models.Dto.RecipeDto
        <div style="float:left; width:40%; margin: 20px; border-radius: 7px;">
            <MudText Style="margin-left: 5%">User Id: @UserId</MudText>
            <MudPaper Width="100%" Style="border-radius: 7px;">
                <MudText Style="margin-left: 5%" Color="Color.Primary" Typo="Typo.h6" GutterBottom="true">Today's Details</MudText>
                <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="i" InputLabels="@labels" Width="35%" Height="40%"/>
                <div style="text-align: center">
                    <MudButton OnClick="OpenCaloriesDialog" Variant="Variant.Filled" Color="Color.Primary">Log Calories</MudButton>
                    <MudButton OnClick="EditData" Variant="Variant.Filled" Class="mx-4" Color="Color.Secondary">Create Receipe</MudButton>
                    <MudButton Href="/profile" Variant="Variant.Filled" Color="Color.Tertiary">Profile</MudButton>
                </div>
                <MudText Style="margin-left: 5%" Color="Color.Primary" Class="mt-lg-5" Typo="Typo.h6" GutterBottom="true">Today's Calories</MudText>
                <MudTable Items="ListOfCalories" Class="calories-table">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Value</MudTh>
                        <MudTh>Delete</MudTh>
                        <MudTh>Update</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="items">
                        <MudTd>@items.CalorieName</MudTd>
                        <MudTd>@items.Calorie</MudTd>
                        <MudTd><MudButton @onclick="() => DeleteCalories(items.Id)" Color="Color.Error">Delete</MudButton></MudTd>
                        <MudTd><MudIconButton @onclick="() => UpdateCalories(items)" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit"></MudIconButton></MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </div>
        <div style="float:right; width:50%;margin-top:3.0%; margin-right:3%; margin-bottom:5%; border-radius: 7px !important;">
            <MudPaper Style="border-radius: 7px !important; margin: auto;">
                <MudItem xs="12" md="12">
                    <br/>
                    <MudText Style="margin-left: 5%;;" Color="Color.Primary" Typo="Typo.h6">Recently Added Recipes</MudText>
                    <RecipeCard Recipes="listOfRecipes"></RecipeCard>
                    <MudItem Style="margin-left: 4%" xs="12" md="8" Class="mb-4">
                        <div class="p-3" style="background-color: rgba(203, 195, 227, 1); color: black; border-radius: 7px;">
                            <div style="display: flex; align-items: center; margin-top: 10px;">
                                <MudImage Src="images/FireIcon.png" Width="50"></MudImage>
                                <div style="display: flex; flex-direction: column;">
                                    <MudText Typo="Typo.h5" Class="ms-lg-5">Streaks: @currentStreak</MudText>
                                    <MudText Typo="Typo.h5" Class="ms-lg-5">Longest Streaks: @longestStreak</MudText>
                                </div>
                            </div>
                        </div>
                    </MudItem>
                    <MudItem Style="margin-left: 4%" xs="12" md="8" Class="mb-4">
                        <div class="p-3" style="background-color: rgba(127, 0, 255,0.5); color: white; border-radius: 7px;">
                            <div style="display: flex; align-items: center; margin-top: 10px;">
                                <MudImage Src="images/CaloriesIcon.png" Width="60"></MudImage>
                                <MudText Typo="Typo.h5" Class="ms-lg-5">Total Calories: @ListOfCalories.Sum(c => c.Calorie)</MudText>
                            </div>
                        </div>
                    </MudItem>
                </MudItem>
                <div style="height: 50px">
                    
                </div>
            </MudPaper>
            
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorzied/>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Inject] private ICalories caloriesService { get; set; } = default!;
    [Inject] private ISnackbar snackBar { get; set; } = default!;
    [Inject] IDialogService dialogService { get; set; } = default!;
    [Inject] IRecipe _recipeService { get; set; } = default!;
    [Inject] private IUserDetailService _userDetailService { get; set; } = default!;
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; } = default!;
    List<RecipeDto> listOfRecipes = new List<RecipeDto>();
    public string UserId { get; set; }
    List<CaloriesDto> ListOfCalories = new List<CaloriesDto>();
    int i = -1;
    int dataSize = 4;
    private double[] data = new double[3] { 0, 0, 0 };
    string[] labels = { "Breakfast", "Lunch", "Dinner" };
    string[] trackingLabel = { "Daily Target", "Current" };
    private Double[] trackingData = new Double[2] { 0.0, 0.0 };
    int currentStreak = 0;
    int longestStreak = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshCaloriesData();
        getGraphData();
        //getTrackingGraphData();
        GetStreaks();
        await getRecipes();
    }

    async Task getRecipes()
    {
        var result = await _recipeService.GetRecipesByUserAsync(UserId);
        if (result.IsSuccess == true)
        {
            listOfRecipes = JsonConvert.DeserializeObject<List<RecipeDto>>(Convert.ToString(result.Result));
        }
        
    }
    public async void getTrackingGraphData()
    {
        foreach (CaloriesDto caloriesDto in ListOfCalories)
        {
            if (caloriesDto.Date.Date == DateTime.Today)
            {
                trackingData[1] += caloriesDto.Calorie;
            }
        }

        var result = await _userDetailService.GetByUser(UserId);
        if (result.IsSuccess == true & result.Result != null)
        {
            var userDetail = JsonConvert.DeserializeObject<UserDetail>(Convert.ToString(result.Result));
            trackingData[0] = Decimal.ToDouble(userDetail.DailyCalories);  
        }
        else
        {
            trackingData[0] = 0;
        }
    }
    private void getGraphData()
    {
        foreach (CaloriesDto caloriesDto in ListOfCalories)
        {
            TimeSpan time = caloriesDto.Date.TimeOfDay;
            if (time >= TimeSpan.FromHours(5) && time < TimeSpan.FromHours(12))
            {
                data[0] += caloriesDto.Calorie; 
            }
            else if (time >= TimeSpan.FromHours(12) && time < TimeSpan.FromHours(17))
            {
                data[1] += caloriesDto.Calorie; 
            }
            else if (time >= TimeSpan.FromHours(17) && time < TimeSpan.FromHours(22))
            {
                data[2] += caloriesDto.Calorie; 
            }
        }
    }
    void EditData()
    {

    }
    private void GetStreaks()
    {
        var sortedEntries = ListOfCalories.OrderBy(dto => dto.Date.Date).ToList();
        DateTime? lastDate = null;

        foreach (var entry in sortedEntries)
        {
            if (!lastDate.HasValue)
            {
                currentStreak = 1;
            }
            else
            {
                if (entry.Date.Date == lastDate.Value.Date.AddDays(1))
                {
                    currentStreak++;
                }
                else if (entry.Date.Date > lastDate.Value.Date.AddDays(1))
                {
                    currentStreak = 1;
                }
            }
            if (currentStreak > longestStreak)
            {
                longestStreak = currentStreak;
            }
            lastDate = entry.Date;
        } 
    }
    async Task RefreshCaloriesData()
    {
        var authState = await authenticationState;
        var response = await caloriesService.GetCaloriesByUserAsync(authState.User.FindFirst("Sub")?.Value);
        UserId = authState.User.FindFirst("sub")?.Value;
        if (response != null && response.IsSuccess)
        {
            ListOfCalories = JsonConvert.DeserializeObject<List<CaloriesDto>>(Convert.ToString(response.Result));
            StateHasChanged();
        }
        else
        {
            snackBar.Add("Something went wrong", Severity.Error);
        }
    }
    async void OpenCaloriesDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog = dialogService.Show<CaloriesLog>("Calories Log", closeOnEscapeKey);
        var result = await dialog.Result;
    }
    private async void DeleteCalories(int caloriesId)
    {
        try
        {
           var response = await caloriesService.DeleteCaloriesAsync(caloriesId);
            if (response.IsSuccess)
            {
                ListOfCalories.Remove(ListOfCalories.FirstOrDefault(c => c.Id == caloriesId));
                snackBar.Add($"Success: {response.Message} was deleted", Severity.Success);
                StateHasChanged();
            }
            else
            {
                snackBar.Add($"Error: Something went wrong", Severity.Error);
            }
        } catch (Exception ex)
        {
            snackBar.Add($"Error: {ex.Message}", Severity.Error);
        }

    }
    private async void UpdateCalories(CaloriesDto caloriesDto)
    {
        var parameters = new DialogParameters();
        parameters.Add("caloriesDto", caloriesDto);
        var dialogResult = await dialogService.Show<CaloriesEditDialog>("Calories: ", parameters).Result;
        snackBar.Add("Calorie Updated", Severity.Success);
        await RefreshCaloriesData();
    }
}